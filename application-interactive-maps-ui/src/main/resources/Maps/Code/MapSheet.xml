<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Maps.Code.MapSheet" locale="">
  <web>Maps.Code</web>
  <name>MapSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>#if($doc.documentReference.name == 'MapSheet')MapSheet#{else}$services.display.title($doc, {'displayerHint': 'default', 'outputSyntaxId': 'plain/1.0'})#end</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Maps.Code.CommonMacros" /}}

{{velocity}}
## If the document is being edited then display the edit form
#if ($xcontext.action == 'edit')
  #set ($advancedFieldsNames = ['locationClasses', 'includePopups', 'includeMapScale', 'defaultZoom', 'defaultLocation', 'tiles', 'mapSize', 'includeFacets', 'facetFields', 'attribution', 'customLocationProperties'])
  #set ($advancedFields = [])
  #set($class = $doc.getObject('Maps.Code.MapClass').xWikiClass)
  {{html wiki="true" clean="false"}}
  {{info}}Leave a field empty for its default value{{/info}}
  (% class="xform" %)(((
    &lt;dl&gt;
      #foreach($prop in $class.properties)
        #if (!$advancedFieldsNames.contains($prop.name))
          #displayClassProperty($prop)
        #else
          #set ($discard = $advancedFields.add($prop))
        #end
      #end
      &lt;p&gt;&lt;button type="button" id="advanced-options-btn" class="btn btn-primary" onclick="toggleClass(document.getElementsByClassName('advanced-options')[0], 'hidden')"&gt;
        $services.localization.render('intmap.mapclass.advancedOptions')
      &lt;/button&gt;&lt;/p&gt;
      (% class="advanced-options hidden" %)(((
      #foreach ($prop in $advancedFields)
        #displayClassProperty($prop)
      #end
      )))
    &lt;/dl&gt;
  )))
  {{/html}}
#elseif ($doc.documentReference.name == 'MapSheet' || $doc.documentReference.name == 'MapTemplate')
  ## Do nothing
#else
  ## Get the css and js for the map
  #set ($discard = $xwiki.ssx.use('Maps.Code.LeafletUtils'))
  #set ($discard = $xwiki.jsx.use('Maps.Code.LeafletUtils'))
  #set ($discard = $xwiki.jsx.use('Maps.Code.MapSheet'))
  ## Get all the map data
  #set ($mapObj = $doc.getObject('Maps.Code.MapClass'))
  ## Create a map of all the properties of object
  #set ($mapObjMapping = {})
  #foreach ($prop in $mapObj.getProperties())
    #set ($discard = $mapObjMapping.put($prop.getName(), $mapObj.getValue($prop.getName())))
  #end
  #set ($mapId = $doc.fullName.toLowerCase())
  #set ($discard = $mapObjMapping.put('id', $mapId))
  ## Get all the properties as JSON so that we can supply these options to the map
  #set ($mapObjJSON = $jsontool.serialize($mapObjMapping))
  #set ($mapObjJSON = $mapObjJSON.replaceAll("'", '\\"'))
  ## Get all the data to be displayed inside the map
  #set ($queryStatement = $mapObjMapping.get('query'))
  #if (!$mapObjMapping.get('mapSize').matches('((\d*)(px|%)?), ?((\d*)(px|%)?)'))
    #set ($mapSize = ['100%', '500px'])
  #else
    #set ($mapSize = $mapObjMapping.get('mapSize').split(','))
  #end
  ## Get all location classes
  #set ($allLocationClasses = [])
  #foreach ($locationClassLine in $mapObjMapping.get('locationClasses').split('\n'))
    #set ($locationClassData = $locationClassLine.split(':'))
    #set ($locationClass = {})
    #set ($discard = $locationClass.put('className', $locationClassData[0].trim()))
    #set ($discard = $locationClass.put('latitude', $locationClassData[1].split(',')[0].trim()))
    #set ($discard = $locationClass.put('longitude', $locationClassData[1].split(',')[1].trim()))
    #set ($discard = $allLocationClasses.add($locationClass))
  #end
  #displayMapUI()
#end
{{/velocity}}</content>
  <object>
    <name>Maps.Code.MapSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>14f9497b-ec46-405e-ac88-c4d6d7c7a4b7</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>//Make sure to include Maps.Code.LeafletUtils before using this
require(['jquery', 'leaflet', 'leaflet-commons', 'leaflet-indoor', 'bootstrap'], function ($, leaflet, leafletCommons) {
  'use strict';
  var init = function ()
  {

    var map;

    //Render the map
    $$('.map-container').each(function (element) {
      var options = JSON.parse(element.dataset.options);
      options.addFullscreen = 1;
      map = leafletCommons.createEmptyMap(options);
      var mapData = JSON.parse(element.dataset.mapdata);
      if (mapData.length === 0) {
        leafletCommons.getLocationCoords(options.defaultLocation, function (location) {
          map.setView(location);
        });
      }
      var allLayers = L.featureGroup();
      var dataLength = mapData.length - 1;
      var i = 0;
      map.on('click', function () {
        if ($(".leaflet-popup-pane").html() == '') {
          $('.map-search-filter').removeClass('open');
          leafletCommons.updateURLWithMapState();
        }
      });
      mapData.each(function (data) {
        if (data.location &amp;&amp; data.type == 'point') {
          //Set options for the point
          var pointOptions;
          try {
            if (data.options) {
              pointOptions = leafletCommons.cartoCssToJSON(data.options);
            } else {
              pointOptions = {};
            }
          } catch (e) {
            pointOptions = {};
          }
          leafletCommons.getLocationCoords(data.location, function (location) {
            leafletCommons.addMarker(data.markerIcon, location, pointOptions, function (marker) {
              leafletCommons.processPopupAndAdd(data, marker, allLayers);
              if (dataLength == i) {
                allLayers.addTo(map);
                map.fitBounds(allLayers.getBounds());
              }
              i++;
            });
          });
        } else if (data.type == 'path') {
          var points = JSON.parse(data.points);
          var noOfPoints = points.length - 1;
          var j = 0;
          var allPoints = [];
          points.forEach(function (point) {
            var pointOptions;
            try {
              if (point.options) {
                pointOptions = leafletCommons.cartoCssToJSON(point.options);
              } else {
                pointOptions = {};
              }
            } catch (e) {
              pointOptions = {};
            }
            allPoints.push(point.location);
            leafletCommons.getLocationCoords(point.location, function (pointLocation) {
              leafletCommons.addMarker(point.markerIcon, pointLocation, pointOptions, function (pointMarker) {
                //Putting point data in a single object
                point.location = pointLocation;
                point.marker = pointMarker;
                leafletCommons.processPopupAndAdd(point, point.marker, allLayers);
                if (noOfPoints == j) {
                  var pathData = {
                    points: allPoints,
                    includePopup: data.includePopup
                  };
                  leafletCommons.generatePath(pathData, function (path) {
                    path.addTo(map);
                  });
                  if (dataLength == i) {
                    allLayers.addTo(map);
                    map.fitBounds(allLayers.getBounds());
                  }
                  i++;
                }
                j++;
              });
            });
          });
        } else if (data.type === 'shape') {
          var shapeGeoJSON;
          var shapeStyle;
          var shape;
          try {
            if (data.style) {
              shapeStyle = leafletCommons.cartoCssToJSON(data.style);
            } else {
              shapeStyle = {};
            }
            shapeGeoJSON = JSON.parse(data.shapeGeoJSON);
            shape = L.geoJSON(shapeGeoJSON, {
              style: shapeStyle,
              pointToLayer: function (feature, latlng) {
                if (feature.properties !== undefined &amp;&amp; Object.keys(feature.properties).length !== 0 &amp;&amp; feature.properties.radius !== undefined) {
                  return L.circle(latlng, {radius: feature.properties.radius});
                } else {
                  return L.marker(latlng);
                }
              }
            });
          } catch (err) {
            new XWiki.widgets.Notification('The shape properties are invalid. ' + err, 'error');
          }
          if (shape) {
            leafletCommons.processPopupAndAdd(data, shape, allLayers);
          }
          if (dataLength == i) {
            allLayers.addTo(map);
            map.fitBounds(allLayers.getBounds());
          }
          i++;
        } else if (data.type === 'indoor') {
          var allLevelsJSON = {type: 'FeatureCollection', features: []};
          //Processing each level separately
          Object.keys(data.allIndoorData).forEach(function (level) {
            var allLevelItems = data.allIndoorData[level];
            //Placing required data of each level into shape's geojson
            allLevelItems.map(function (item) {
              try {
                if (item.type === 'point') {
                  if (item.options) {
                    item.options = leafletCommons.cartoCssToJSON(item.options);
                  } else {
                    item.options = {};
                  }
                  var point = L.marker(item.location, item.options);
                  item.geoJSON = point.toGeoJSON();
                  item.geoJSON.properties.level = level;
                  item.geoJSON.properties.includePopup = item.includePopup;
                  item.geoJSON.properties.title = item.title ? item.title : '';
                  item.geoJSON.properties.content = item.content ? item.content : '';
                  item.geoJSON.properties.options = item.options;
                  item.geoJSON.properties.markerIcon = item.markerIcon;
                  allLevelsJSON.features.push(item.geoJSON);
                } else if (item.type === 'shape') {
                  item.shapeGeoJSON = JSON.parse(item.shapeGeoJSON);
                  item.shapeGeoJSON.features.map(function (feature) {
                    feature.properties.level = level;
                    feature.properties.includePopup = item.includePopup;
                    feature.properties.title = item.title ? item.title : '';
                    feature.properties.content = item.content ? item.content : '';
                    feature.properties.style = leafletCommons.cartoCssToJSON(item.style);
                  });
                  item.shapeGeoJSON.features.each(function (feature) {
                    allLevelsJSON.features.push(feature);
                  });
                }
              } catch (e) {
                new XWiki.widgets.Notification('Error processing indoor structure item: ' + item.title, 'error');
              }
            });
          });
          //Creating the indoor layer and processing the collected data to display on map
          var indoorLayer = new L.Indoor(allLevelsJSON, {
            style: function (feature) {
              if (feature.properties.style) {
                return feature.properties.style;
              } else {
                return {};
              }
            },
            pointToLayer: function (feature, latlng) {
              if (feature.properties &amp;&amp; Object.keys(feature.properties).length !== 0 &amp;&amp; feature.properties.radius) {
                return L.circle(latlng, {radius: feature.properties.radius});
              } else {
                if (feature.properties.options) {
                  return L.marker(latlng, feature.properties.options);
                } else {
                  return L.marker(latlng);
                }
              }
            },
            onEachFeature: function (feature, layer) {
              var popupData;
              if (feature.properties.includePopup === 1) {
                if (feature.properties.content.length &gt; 500) {
                  popupData = '&lt;h2&gt;' + feature.properties.title + '&lt;/h2&gt;&lt;hr/&gt;' + '&lt;div style="height: 150px; overflow: auto;"&gt;' + feature.properties.content + '&lt;/div&gt;';
                } else {
                  popupData = '&lt;h2&gt;' + feature.properties.title + '&lt;/h2&gt;&lt;hr/&gt;' + '&lt;div&gt;' + feature.properties.content + '&lt;/div&gt;';
                }
                layer.bindPopup(popupData);
              }
            }
          });
          indoorLayer.setLevel("0");
          allLayers.addLayer(indoorLayer);
          var levelControl = new L.Control.Level({
            level: "0",
            levels: indoorLayer.getLevels(),
            indoorLayer: indoorLayer
          });
          levelControl.addTo(map);
          if (dataLength == i) {
            allLayers.addTo(map);
            map.fitBounds(allLayers.getBounds());
          }
          i++;
        } else {
          new XWiki.widgets.Notification('Error while adding items to the map. Make sure the query is correct.', 'error');
        }
      });
    });

    //Handle map item and location search
    $('.map-search-form').submit(function (e) {
      e.preventDefault();
      var formVal = $(this).find('input[type=search]').val();
      var searchType = $(this).find('input[name=search-type]:checked').val();
      var viewURL = leafletCommons.updateURLWithMapState();
      if (searchType == 'location') {
        leafletCommons.getLocationCoords(formVal, function(location){
          if (location &amp;&amp; map) {
            map.setView(L.latLng(location), 14);
          }
        });
      } else {
        searchType = searchType !== undefined ? searchType : 'item';
        viewURL = leafletCommons.replaceParameter(viewURL, 'text', formVal);
        viewURL = leafletCommons.replaceParameter(viewURL, 'search_type', searchType);
        $(document).trigger('xwiki:search:update', viewURL);
      }
    });

    //Toggle refine your search and result items sections
    $('.map-results-section').on('click', function () {
      $(this).toggleClass('open');
      $(this).next().toggleClass('open');
      leafletCommons.updateURLWithMapState();
    });

    //Open/close dropdown for selecting search type location/item
    $('#search-type-btn').on('click', function () {
      $('.search-types').toggleClass('open');
    });

    //Go to location of the result item
    $('.search-item-results .goto-loc-point').on('click', function () {
      var loc = JSON.parse(this.dataset.location);
      if (loc) {
        leafletCommons.getLocationCoords(loc, function(location){
          if (location &amp;&amp; map) {
            map.setView(L.latLng(location), 14);
          }
        });
      }
    });

    //Go to location of the path result item
    $('.search-item-results .goto-loc-points').on('click', function () {
      var loc = JSON.parse(this.dataset.location);
      map.fitBounds(loc.points);
    });

    //Close map search and filter section when close button is clicked
    $('#map-search-close').on('click', function () {
      $('.map-search-filter').removeClass('open');
      leafletCommons.updateURLWithMapState();
    });
    $(init).on('xwiki:dom:updated', init);
  }

});</code>
    </property>
    <property>
      <name>leaflet-map</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
